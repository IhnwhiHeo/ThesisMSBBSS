data
data = c(10,30,NA,100,50,40,NA,60)
data
mean(data)
mean(data, na.rm=TRUE)
mean(data[-1], na.rm=TRUE)
mean(data[-3], na.rm=TRUE)
means = matrix(0,length(data))
means
means[i] = mean(data[-1], na.rm=T)
for (i in data){
means[i] = mean(data[-i], na.rm=T)
}
means
mean(data[-i], na.rm=T)
mean(data[-dat], na.rm=T)
for (dat in data){
mean(data[-dat], na.rm=T)
}
means[dat]=mean(data[-dat], na.rm=T)
means
mean(data, na.rm=TRUE)
mean(data[-3], na.rm=TRUE)
mean(data[-2], na.rm=TRUE)
for (dat in 1:length(data)){
means[dat]=mean(data[-dat], na.rm=T)
}
means
x = c(10,30,NA,100,50,40,NA,60)
n = length(x)
u = rep(0, n)
u
u[i] = mean(x[-i])
for (i in 1:n) {
u[i] = mean(x[-i])
}
u
for (i in 1:n) {
u[i] = mean(x[-i], na.rm=T)
}
u
u
u = rep(0, n)
u
means = matrix(0,length(data))
for (dat in 1:length(data)){
means[dat]=mean(data[-dat], na.rm=T)
}
means
data = c(10,30,NA,100,50,40,NA,60)
data
means = matrix(0,length(data))
for (dat in 1:length(data)){
means[dat]=mean(data[-dat], na.rm=T)
}
means
mean(means)
data = c(10,30,NA,100,50,40,NA,60)
data
jkmeans = matrix(0,length(data))
for (dat in 1:length(data)){
jkmeans[dat]=mean(data[-dat], na.rm=T)
}
jkmeans
mean = mean(data,na.rm = T)
mean
jkvar = (n-1)/n * sum( (jkmeans[i] - mean)^2 )}
n = length(data)
jkmeans = matrix(0,n)
for (dat in 1:n{
}
n = length(data)
jkmeans = matrix(0,n)
for (dat in 1:n){
jkmeans[dat]=mean(data[-dat], na.rm=T)
}
jkmeans
for (i in jkmeans){
jkvar = (n-1)/n * sum( (jkmeans[i] - mean)^2 )}
for (i in jkmeans){jkvar = (n-1)/n * sum( (jkmeans[i] - mean)^2 )}
jkvar
?sum()
for (i in jkmeans){jkvar = (n-1)/n * sum( (jkmeans[i] - mean)^2, na.rm=T )}
jkvar
jkvar = (n-1)/n * sum( (jkmeans - mean)^2, na.rm=T )
jkvar
jkmeans - mean
(jkmeans - mean)^2
sum( (jkmeans - mean)^2)
data = c(50,10,30, NA, 100, NA, 40, 40, NA, 60)
data
mean = mean(data,na.rm = T)
mean
# mean with na.rm=TRUE is 47.14
n = length(data)
jkmeans = matrix(0,n)
for (dat in 1:n){
jkmeans[dat]=mean(data[-dat], na.rm=T)
}
jkmeans
jkvar
b1 <- c(100,60,30,30,30,10,10)
mean(b1)
mean
jkmeans - mean
(jkmeans - mean)^2
sum((jkmeans - mean)^2)
# mean with na.rm=TRUE is 47.14
n = length(data)
# jackknife variance estimator
jkvar = (n-1)/n * sum((jkmeans - mean)^2)
jkvar
set.seed(123)
library(mice)
plot(mice::nhanes)
imp <- mice(mice::boys)
#save a plot as a postscript file (you'll have to render it before you can display it)
postscript("Plots/epsplot.eps")
setwd("~/Master/Markup/WEEK3")
setwd("~/Master/Markup/WEEK3")
#save a plot as a postscript file (you'll have to render it before you can display it)
postscript("Plots/epsplot.eps")
#save a plot as a postscript file (you'll have to render it before you can display it)
postscript("Plots/epsplot.eps")
plot(nhanes)
dev.off()
#save a plot as a pdf file
pdf("Plots/pdfplot.pdf")
plot(nhanes)
#save a plot as a pdf file
pdf("Plots/pdfplot.pdf")
args(lm)
?lm()
#save a plot as a pdf file with fixed dimensions
pdf("Plots/pdfplot2.pdf", width = 16, height = 9)
#save a plot as a pdf file with fixed dimensions
pdf("Plots/pdfplot2a.pdf", width = 4, height = 2)
set.seed(123)
library(mice)
plot(mice::nhanes)
imp <- mice(mice::boys)
#save a plot as a postscript file (you'll have to render it before you can display it)
postscript("Plots/epsplot.eps")
plot(nhanes)
arplot(nhanes)
library(mice)
?pdf
set.seed(123)
library(mice)
plot(mice::nhanes)
imp <- mice(mice::boys)
#save a plot as a postscript file (you'll have to render it before you can display it)
postscript("Plots/epsplot.eps")
plot(nhanes)
dev.off()
#save a plot as a pdf file
pdf("Plots/pdfplot.pdf")
plot(nhanes)
dev.off()
#save a plot as a pdf file with fixed dimensions
pdf("Plots/pdfplot2.pdf", width = 16, height = 9)
plot(nhanes)
dev.off()
#save a plot as a pdf file with fixed dimensions
pdf("Plots/pdfplot2a.pdf", width = 4, height = 2)
plot(nhanes)
dev.off()
#save a plot as a multiple pages pdf file
pdf("Plots/pdfplot3.pdf", onefile = TRUE)
plot(imp)
dev.off()
#matrix with all data used
data.all <- cbind(data = data,
squared1 = data^12 / data^10,
squared2 = data^2,
exponent = exp(data))
#load package lattice
library(lattice)
library(xtable)
#fix the random generator seed
set.seed(123)
#create data
data <- rnorm(1000)
#plot histogram
histogram(data)
#plot density
densityplot(data^12 / data^10, xlab = expression(data^12/data^10))
#plot stripplot
stripplot(data^2, xlab = expression(data^2))
#plot boxplot
bwplot(exp(data))
#matrix with all data used
data.all <- cbind(data = data,
squared1 = data^12 / data^10,
squared2 = data^2,
exponent = exp(data))
data.all
setwd("~/Master/Markup/WEEK3/Exercise")
setwd("~/Master/Markup/WEEK3/Exercise")
setwd("~/Master/Markup/WEEK3/Exercise")
#load package lattice
library(lattice)
library(xtable)
#fix the random generator seed
set.seed(123)
#create data
data <- rnorm(1000)
#plot histogram
histogram(data)
#plot density
densityplot(data^12 / data^10, xlab = expression(data^12/data^10))
#plot stripplot
stripplot(data^2, xlab = expression(data^2))
#plot boxplot
bwplot(exp(data))
#matrix with all data used
data.all <- cbind(data = data,
squared1 = data^12 / data^10,
squared2 = data^2,
exponent = exp(data))
#save a plot as a postscript file (you'll have to render it before you can display it)
postscript("epsplot.eps")
dev.off()
?pdf()
#save a plot as a pdf file
pdf("Plots/histogram")
histogram(data)
#save a plot as a pdf file
histogram(data)
pdf("histogram")
dev.off()
pdf("density")
#density plot
densityplot(data^12 / data^10, xlab = expression(data^12/data^10))
pdf("density")
#density plot
densityplot(data^12 / data^10, xlab = expression(data^12/data^10))
#density plot
plot <- densityplot(data^12 / data^10, xlab = expression(data^12/data^10))
plot
#save histogram
histogram(data)
